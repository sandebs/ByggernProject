
Byggern2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000093e  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000756  00000000  00000000  00000b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037e  00000000  00000000  0000128c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000d8  00000000  00000000  0000160c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000441  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000294  00000000  00000000  00001b25  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001db9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 ef       	ldi	r30, 0xF6	; 246
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 30       	cpi	r26, 0x00	; 0
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  a6:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <xmem_init>:
//Read function
uint8_t xmem_read(uint16_t addr){
	volatile char *ext_mem = (char *) 0x1000;
	uint8_t ret_val = ext_mem[addr];
	return ret_val;
}
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
  ba:	08 95       	ret

000000bc <main>:
// 	printf("test");
// 	SRAM_test();
	

//	Task 3, check addresses decoder, writing to NAND Logic.
	xmem_init();
  bc:	0e 94 57 00 	call	0xae	; 0xae <xmem_init>
	SFIOR |= (1 << XMM2); //Mask unused bits/pins, which is PC4-PC7
}
//Write function
void xmem_write(uint8_t data, uint16_t addr){
	volatile char *ext_mem = (char *) 0x1000;
	ext_mem[addr] = data;
  c0:	e0 e0       	ldi	r30, 0x00	; 0
  c2:	f8 e1       	ldi	r31, 0x18	; 24
  c4:	9f ef       	ldi	r25, 0xFF	; 255
  c6:	80 ef       	ldi	r24, 0xF0	; 240
  c8:	90 83       	st	Z, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	2f ef       	ldi	r18, 0xFF	; 255
  cc:	31 ee       	ldi	r19, 0xE1	; 225
  ce:	44 e0       	ldi	r20, 0x04	; 4
  d0:	21 50       	subi	r18, 0x01	; 1
  d2:	30 40       	sbci	r19, 0x00	; 0
  d4:	40 40       	sbci	r20, 0x00	; 0
  d6:	e1 f7       	brne	.-8      	; 0xd0 <main+0x14>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x1e>
  da:	00 00       	nop
  dc:	80 83       	st	Z, r24
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	35 ea       	ldi	r19, 0xA5	; 165
  e2:	4e e0       	ldi	r20, 0x0E	; 14
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	30 40       	sbci	r19, 0x00	; 0
  e8:	40 40       	sbci	r20, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x28>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x32>
  ee:	00 00       	nop
  f0:	eb cf       	rjmp	.-42     	; 0xc8 <main+0xc>

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
